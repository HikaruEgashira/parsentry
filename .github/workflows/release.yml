name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. v0.6.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation from git commits
          echo "Generating changelog for version ${{ steps.get_version.outputs.version }}"
          
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "Changes since $PREV_TAG:" > changelog.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> changelog.md
          else
            echo "Initial release" > changelog.md
            git log --pretty=format:"- %s (%h)" >> changelog.md
          fi
          
          cat changelog.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: false

  build_and_upload:
    name: Build and Upload Artifacts
    needs: create_release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: vulnhuntrs-linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: vulnhuntrs-linux-x86_64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: vulnhuntrs-linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: vulnhuntrs-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: vulnhuntrs-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: vulnhuntrs-windows-x86_64.exe

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
          elif [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            sudo apt-get update
            sudo apt-get install -y musl-tools
          fi

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/vulnhuntrs.exe ${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/vulnhuntrs ${{ matrix.name }}
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream

  publish_crate:
    name: Publish to crates.io
    needs: [create_release, build_and_upload]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Only publish if we have a registry token
          if [ -n "$CARGO_REGISTRY_TOKEN" ]; then
            cargo publish
          else
            echo "CARGO_REGISTRY_TOKEN not set, skipping crates.io publication"
          fi

  update_homebrew:
    name: Update Homebrew Formula
    needs: [create_release, build_and_upload]
    runs-on: ubuntu-latest
    if: github.repository_owner == 'HikaruEgashira'
    steps:
      - name: Update Homebrew formula
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN }}
        run: |
          # This would update a Homebrew formula if we have one
          echo "Homebrew formula update would go here"
          echo "Version: ${{ needs.create_release.outputs.version }}"

  notify_success:
    name: Notify Release Success
    needs: [create_release, build_and_upload, publish_crate]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Notify success
        run: |
          echo "âœ… Release ${{ needs.create_release.outputs.version }} completed successfully!"
          echo "ðŸ“¦ Binary artifacts uploaded to GitHub releases"
          echo "ðŸš€ Docker images will be built and published via separate workflow"